substitutions:
  name: "centurion-d5-evo"
  friendly_name: "Centurion D5 Evo"
  comment: "Control Centurion D5 Evo gate motor remotely. Including Kocom bell ringing"

  relay_1_pin: GPIO32
  relay_2_pin: GPIO33
  relay_3_pin: GPIO25
  relay_4_pin: GPIO26
  led_pin: GPIO23
  bell_pin: GPIO19

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  platformio_options:
    board_build.f_cpu: 80000000L #Reduce power draw of ESP32
  comment: ${comment}
#  name_add_mac_suffix: true
  project:
    name: ${project_name}
    version: ${project_version}

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
# logger:
#   level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: none
  # output_power: "20"
  # Optional manual IP
  manual_ip:
    static_ip: 10.0.0.32
    gateway: 10.0.0.254
    subnet: 255.255.255.0
    dns1: 10.0.0.254

 #    reboot_timeout: 1h

  ap:
    ssid: "Gate Fallback Hotspot"
    password: !secret ap_password
  
# improv_serial:

captive_portal:

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password


binary_sensor:

  - platform: gpio
    pin:
      number: ${bell_pin}
      inverted: true
      mode:
        input: true
        pullup: true 
    id: bell_sensor
    name: "Bell Sensor"
    icon: mdi:bell    
    publish_initial_state: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 10s

  - platform: gpio
    pin: ${led_pin}
    id: status_led
    name: "Status LED"
    entity_category: diagnostic
    icon: mdi:led-outline
    disabled_by_default: true
    publish_initial_state: true
    filters:
        delayed_on_off: 100ms
    on_multi_click:
      - timing: # Closed
          - OFF for at least 2000ms
        then:
          - logger.log: "Closed"
          - text_sensor.template.publish:
              id: status
              state: "Closed"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Open
          - ON for at least 2000ms
        then:
          - logger.log: "Open"
          - text_sensor.template.publish:
              id: status
              state: "Open"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Closing
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        # - OFF for 100ms to 200ms
        # - ON for 100ms to 200ms
        # - OFF for 100ms to 200ms
        # - ON for 100ms to 200ms
        # - OFF for 100ms to 200ms
        # - ON for 100ms to 200ms
        # - OFF for 100ms to 200ms
        # - ON for 100ms to 200ms
        # - OFF for 100ms to 200ms
        # - ON for 100ms to 200ms
        # - OFF for 100ms to 200ms
        # - ON for 100ms to 200ms
        # - OFF for 100ms to 200ms
        then:
          - logger.log: "Closing"
          - text_sensor.template.publish:
              id: status
              state: "Closing"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Opening
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          # - OFF for 200ms to 400ms
          # - ON for 200ms to 400ms
          # - OFF for 200ms to 400ms
        then:
          - logger.log: "Opening"
          - text_sensor.template.publish:
              id: status
              state: "Opening"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Pillar light override
          - ON for 200ms to 300ms
          - OFF for 1700ms to 1800ms
        then:
          - logger.log: "Pillar light override"
          - text_sensor.template.publish:
              id: status
              state: "Pillar light override"
        invalid_cooldown: 100ms

      - timing: # No Mains
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 1200ms to 1400ms
        then:
          - logger.log: "No Mains"
          - text_sensor.template.publish:
              id: status
              state: "No Mains"
        invalid_cooldown: 100ms

      - timing: # Battery Low
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 500ms to 1000ms
        then:
          - logger.log: "Low Battery"
          - text_sensor.template.publish:
              id: status
              state: "Low Battery"
        invalid_cooldown: 100ms


output:
  - platform: gpio
    pin: ${relay_1_pin}
    id: relay_1
    inverted: true

  - platform: gpio
    pin: ${relay_2_pin}
    id: relay_2
    inverted: true

  - platform: gpio
    pin: ${relay_3_pin}
    id: relay_3
    inverted: true


button:
  - platform: output
    output: relay_1
    id: button_1
    disabled_by_default: true
    duration: 300ms
    name: "Open / Auto Close"
    icon: "mdi:gate"
  - platform: output
    output: relay_2
    id: button_2
    disabled_by_default: true
    duration: 3000ms # Autoclose override time
    name: "Open / Manual Close"
    icon: "mdi:gate"
  - platform: output
    output: relay_3
    id: button_3
    duration: 500ms
    name: "Pedestrian"
    icon: "mdi:walk"

switch:
  - platform: gpio
    pin:
      number: ${relay_4_pin}
    id: relay_4
    icon: "mdi:lock"
    name: "Lock"
    inverted: true
  - platform: restart
    name: "ESP Restart"


cover:
  - platform: template
    name: "Gate"
    device_class: gate
    id: gate
    lambda: |-
      if (id(status).state == "Open") {
        return COVER_OPEN;
      } else if (id(status).state == "Closed") {
        return COVER_CLOSED;
      } else {
        return {};
      }
    open_action:
      - button.press: button_1
    close_action:
      - button.press: button_1
    stop_action:
      - button.press: button_1
    optimistic: false

# # Sensors for ESP version and WIFI information
text_sensor:
  - platform: template
    icon: mdi:information-outline
    id: status
    name: "Status"

sensor:

  - platform: uptime
    name: Uptime
    id: sys_uptime
    device_class: "duration"
    state_class: "TOTAL_INCREASING"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: wifi_signal 
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    device_class: "signal_strength"
    state_class: "measurement"
    entity_category: "diagnostic"
